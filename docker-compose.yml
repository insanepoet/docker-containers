version: "3.9"
# - https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
# - https://github.com/dockserver/dockserver
# - https://github.com/faritvidal/Config-Traefik-2.2.X
# - https://github.com/ronioncloud/Traefikv2
# - https://github.com/GamermadHD/traefikv2apps


### Networks
# Should be no need to create any networks outside this file
networks:
  traefik-proxy:
    external: true

### Secrets
# Passwords / etc placed in secrets files opposed to hardcoding
secrets:
  htpasswd:
    file: /opt/appdata/secrets/htpasswd
  cloudflare_email:
    file: /opt/appdata/secrets/cloudflare_email
  cloudflare_api_key:
    file: /opt/appdata/secrets/cloudflare_api_key
  cloudflare_api_token:
    file: /opt/appdata/secrets/cloudflare_api_token
  authelia_jwt_secret:
    file: /opt/appdata/secrets/authelia_jwt_secret
  authelia_session_secret:
    file: /opt/appdata/secrets/authelia_session_secret
  authelia_storage_mysql_password:
    file: /opt/appdata/secrets/authelia_storage_mysql_password
  authelia_notifier_smtp_password:
    file: /opt/appdata/secrets/authelia_notifier_smtp_password
  authelia_duo_api_secret_key:
    file: /opt/appdata/secrets/authelia_duo_api_secret_key
  oauth_secret:
    file: /opt/appdata/secrets/oauth_secret
  google_client_secret:
    file: /opt/appdata/secrets/google_client_secret
  google_client_id:
    file: /opt/appdata/secrets/google_client_id
  my_email:
    file: /opt/appdata/secrets/my_email
  traefik_pilot_token:
    file: /opt/appdata/secrets/traefik_pilot_token
  mysql_root_password:
    file: /opt/appdata/secrets/mysql_root_password

### Services
# Default Services in stack, traefik/portainer/
services:
  traefik:
    container_name: traefik
    image: traefik:2.5
    restart: unless-stopped
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.dashboard=true
      - --log=true
      - --log.level=WARN
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # Use Docker Socket Proxy for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      # First Domain
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME0 # Pulls main cert
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME0 # Pulls wildcard
      # Second Domain
      - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME1
      - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME1
      # Third Domain
      - --entrypoints.https.http.tls.domains[2].main=$DOMAINNAME2
      - --entrypoints.https.http.tls.domains[2].sans=*.$DOMAINNAME2
      # Fourth Domain
      - --entrypoints.https.http.tls.domains[3].main=$DOMAINNAME3
      - --entrypoints.https.http.tls.domains[3].sans=*.$DOMAINNAME3
      - --providers.docker.network=traefik-proxy
      - --providers.docker.swarmMode=false
      # Load dynamic configuration from one or more .toml or .yml files in a directory (must be top level)
      - --providers.file.directory=/opt/appdata/traefik2/rules
      - --providers.file.watch=true
      # LetsEncrypt Staging Server - uncomment when testing
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory 
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 15777
        published: 15777
        protocol: udp
        mode: host
      - target: 15000
        published: 15000
        protocol: udp
        mode: host
      - target: 7777
        published: 7777
        protocol: udp
        mode: host
      # - target: 8080
      #   published: 8080
      #   protocol: tcp
      #   mode: host
    volumes:
      - /opt/appdata/traefik2/rules:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - /opt/appdata/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - /opt/appdata/traefik2/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
      - HTPASSWD_FILE=/run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
    secrets:
      - cloudflare_email
      - cloudflare_api_key
      - htpasswd
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`trae.$DOMAINNAME0`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME0`) && Path(`/ping`)"
      #- "traefik.http.routers.ping.tls=true"
      #- "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"
  
   # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    restart: always
    # profiles:
    # - core
    networks:
      socket_proxy:
        ipv4_address: 10.9.0.1 # You can specify a static IP
    privileged: true
    ports:
    # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
      - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Ouroboros
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    # image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    restart: always
    # profiles:
    # - core
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # Allow apps to bypass OAuth. Radarr example below will bypass OAuth if API key is present in the request (eg. from NZB360 mobile app).
    # While this is one way, the recommended way is to bypass authentication using Traefik labels shown in some of the apps later.
    # command: --rule.radarr.action=allow --rule.radarr.rule="Headers(`X-Api-Key`, `$RADARR_API_KEY`)"
    # command: --rule.sabnzbd.action=allow --rule.sabnzbd.rule="HeadersRegexp(`X-Forwarded-Uri`, `$SABNZBD_API_KEY`)"
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
      - PROVIDERS_GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME0
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME0
      - URL_PATH=/_oauth
      - WHITELIST=$MY_EMAIL
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=86400 # 1 day
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    secrets: # had trouble getting secrets to work: https://github.com/thomseddon/traefik-forward-auth/issues/155#issuecomment-664630985
      - google_client_id
      - google_client_secret
      - oauth_secret
      - my_email
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  
  ### Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
    image: authelia/authelia:latest
    restart: always
    # profiles:
    # - core
    networks:
      - traefik-proxy
      - default
    # ports:
    #   - "9091:9091"
    volumes:
      - /opt/appdata/authelia:/config
    environment:
      - TZ=$TZ
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/authelia_duo_api_secret_key
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_mysql_password
      - authelia_notifier_smtp_password
      - authelia_duo_api_secret_key
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=Host(`auth.mediaservpro.tv`)"
      - "traefik.http.routers.authelia-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  ### Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    # profiles:
    # - apps
    # command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
    command: -H tcp://socket-proxy:2375
    networks:
      - traefik-proxy
      - socket_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock:ro # # Use Docker Socket Proxy instead for improved security
      - /opt/appdata/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`port.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  ### Organizr - Unified Frontend
  organizr:
    container_name: organizr
    image: organizr/organizr:latest
    restart: unless-stopped
    # profiles:
    # - apps
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$ORGANIZR_PORT:80"
    volumes:
      - /opt/appdata/organizr:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - fpm=true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=Host(`$DOMAINNAME0`) || Host(`www.$DOMAINNAME0`)"
      #- "traefik.http.routers.organizr-rtr.rule=Host(`organizr.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.organizr-rtr.middlewares=organizr-redirect@docker,chain-oauth@file"
        # Redirect non-www to www middleware
      - "traefik.http.middlewares.organizr-redirect.redirectregex.regex=^https?://$DOMAINNAME0/(.*)"
      - "traefik.http.middlewares.organizr-redirect.redirectregex.replacement=https://www.$DOMAINNAME0/$${1}"
      - "traefik.http.middlewares.organizr-redirect.redirectregex.permanent=true"
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"
      
  ### Heimdall - Unified Frontend Alternative
  # Putting all services behind Oragnizr slows things down.
  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    # profiles:
    # - apps
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$HEIMDALL_PORT:80"
    volumes:
      - /opt/appdata/heimdall:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`heim.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

  # MariaDB - MySQL Database
  # After starting container for first time dexec and mysqladmin -u root password <password>
  mariadb:
    container_name: mariadb
    image: linuxserver/mariadb:latest
    restart: always
    # profiles:
    # - core
    security_opt:
      - no-new-privileges:true
    ports:
      - "$MARIADB_PORT:3306"
    volumes:
      - /opt/appdata/mariadb/data:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - FILE__MYSQL_ROOT_PASSWORD=/run/secrets/mysql_root_password # Note FILE__ (double underscore) - Issue #127
    secrets:
      - mysql_root_password

  # InfluxDB - Database for sensor data
  # Create influxdb.conf
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: always
    # profiles:
    # - core
    security_opt:
      - no-new-privileges:true
    ports:
      - "$INFLUXDB_PORT:8086"
      - "$INFLUXDB_PORT_PROXMOX:8087/udp"
    volumes:
      - /opt/appdata/influxdb/etc/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - /opt/appdata/influxdb/db:/var/lib/influxdb
    # command: -config /etc/influxdb/influxdb.conf

  # Redis - Key-value Store
  redis:
    container_name: redis
    image: redis:latest
    restart: always
    # profiles:
    # - core
    entrypoint: redis-server --appendonly yes --requirepass $REDIS_PASSWORD --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "$REDIS_PORT:6379"
    security_opt:
      - no-new-privileges:true
    volumes:
      - /opt/appdata/redis/data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  # phpMyAdmin - Database management
  # Create a new user with admin privileges. Cannot login as MySQL root for some reason.
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    # profiles:
    # - apps
    networks:
      - traefik-proxy
      - default
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$PHPMYADMIN_PORT:80"
    # volumes:
    #   - $DOCKERDIR/appdata/phpmyadmin:/etc/phpmyadmin
    environment:
      - PMA_HOST=$MARIADB_HOST
      - PMA_PORT=$MARIADB_PORT
      #- PMA_ARBITRARY=1
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
    secrets:
      - mysql_root_password
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"

  # Redis Commander - Redis Management Tool
  rediscommander:
    container_name: rediscommander
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    # profiles:
    # - apps
    networks:
      - traefik-proxy
      - default
    # ports:
    #   - "$REDISCOMMANDER_PORT:8081"
    security_opt:
      - no-new-privileges:true
    environment:
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PASSWORD=$REDIS_PASSWORD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.rediscommander-rtr.entrypoints=https"
      - "traefik.http.routers.rediscommander-rtr.rule=Host(`redcom.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.rediscommander-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.rediscommander-rtr.service=rediscommander-svc"
      - "traefik.http.services.rediscommander-svc.loadbalancer.server.port=8081"

  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    # profiles:
    # - monitoring
    networks:
      - traefik-proxy
      - default
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$GRAFANA_PORT:3000"
    user: "0"
    volumes:
      - /opt/appdata/grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`graf.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.grafana-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"

   # jDownloader - Download management
  jdownloader:
    image: jlesage/jdownloader-2:latest
    container_name: jdownloader
    restart: always
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$JDOWNLOADER_PORT:5800"
    volumes:
      - /mnt/nfs/Downloads/misc:/data/downloads
      - /opt/appdata/jdownloader:/config
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      TZ: $TZ
      UMASK: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: $JDOWN_VNC_PASSWD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jdownloader-rtr.entrypoints=https"
      - "traefik.http.routers.jdownloader-rtr.rule=Host(`jdown.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.jdownloader-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.jdownloader-rtr.service=jdownloader-svc"
      - "traefik.http.services.jdownloader-svc.loadbalancer.server.port=5800"

  # TransmissionBT - Torrent Downloader
  # ONLY ACCESSIBLE THROUGH https://domain.com/transmission/web/ if using PathPrefix
  transmission-vpn:
    image: haugene/transmission-openvpn:latest
    container_name: transmission-vpn
    restart: always
    # profiles:
    # - media
    networks:
      - traefik-proxy
    # ports:
    #  - "$TRANSMISSION_PORT:9091"
    cap_add:
      - NET_ADMIN
    #devices:
    #  - /dev/net/tun
    #dns:
    #  - 1.1.1.1
    #  - 1.0.0.1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /opt/appdata/transmission-vpn/data:/data
      - /opt/appdata/transmission-vpn/config:/config
      - /mnt/nfs/Downloads/transmission:/data/downloads
    environment:
      OPENVPN_PROVIDER: NORDVPN
      OPENVPN_USERNAME: $FASTEST_USERNAME
      OPENVPN_PASSWORD: $FASTEST_PASSWORD
      NORDVPN_COUNTRY: US
      NORDVPN_CATEGORY: legacy_p2p
      NORDVPN_PROTOCOL: tcp
      #OPENVPN_CONFIG: "Switzerland-TCP"
      #OPENVPN_OPTS: --inactive 3600 --ping 10 --ping-exit 60
      LOCAL_NETWORK: "$LOCAL_NETWORK"
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      UMASK_SET: 2
      TRANSMISSION_RPC_AUTHENTICATION_REQUIRED: "true"
      TRANSMISSION_RPC_HOST_WHITELIST: "127.0.0.1,$SERVER_IP"
      TRANSMISSION_RPC_PASSWORD: $TRANSMISSION_RPC_PASSWORD
      TRANSMISSION_RPC_USERNAME: $TRANSMISSION_RPC_USERNAME
      TRANSMISSION_UMASK: 002
      TRANSMISSION_RATIO_LIMIT: 0.01
      TRANSMISSION_RATIO_LIMIT_ENABLED: "true"
      TRANSMISSION_ALT_SPEED_DOWN: 40000
      TRANSMISSION_ALT_SPEED_ENABLED: "false"
      TRANSMISSION_ALT_SPEED_UP: 250
      TRANSMISSION_SPEED_LIMIT_DOWN: 80000
      TRANSMISSION_SPEED_LIMIT_DOWN_ENABLED: "true"
      TRANSMISSION_SPEED_LIMIT_UP: 500
      TRANSMISSION_SPEED_LIMIT_UP_ENABLED: "true"
      TRANSMISSION_INCOMPLETE_DIR: /data/downloads/torrents/incomplete
      TRANSMISSION_INCOMPLETE_DIR_ENABLED: "true"
      TRANSMISSION_WATCH_DIR: /data/downloads/torrents
      TRANSMISSION_WATCH_DIR_ENABLED: "true"
      TRANSMISSION_DOWNLOAD_DIR: /data/downloads/torrents
      TRANSMISSION_WEB_UI: flood-for-transmission
      LOG_TO_STDOUT: "true"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.transmission-vpn-rtr.entrypoints=https"
      - "traefik.http.routers.transmission-vpn-rtr.rule=Host(`tran.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.transmission-vpn-rtr.middlewares=middlewares-rate-limit@file"
      ## HTTP Services
      - "traefik.http.routers.transmission-vpn-rtr.service=transmission-vpn-svc"
      - "traefik.http.services.transmission-vpn-svc.loadbalancer.server.port=9091"

  # nzbget - Binary newsgrabber (NZB downloader)
  nzbget:
    image: ghcr.io/linuxserver/nzbget
    container_name: nzbget
    restart: always
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$NZBGET_PORT:6789"
    volumes:
      - /opt/appdata/nzbget:/config
      - /mnt/nfs/Downloads/nzbget:/data/downloads
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.nzbget-rtr-bypass.entrypoints=https"
      # BYPASS IS NOT WORKING YET. NEED TO FIGURE THIS OUT.
      - "traefik.http.routers.nzbget-rtr-bypass.rule=Host(`nzg.$DOMAINNAME0`)"
      #- "traefik.http.routers.nzbget-rtr-bypass.rule=Host(`nzbget.$DOMAINNAME0`) && Query(`apikey`, `$NZBGET_API_KEY`)"
      - "traefik.http.routers.nzbget-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.nzbget-rtr.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr.rule=Host(`nzg.$DOMAINNAME0`)"
      - "traefik.http.routers.nzbget-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.nzbget-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.nzbget-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.nzbget-rtr.service=nzbget-svc"
      - "traefik.http.routers.nzbget-rtr-bypass.service=nzbget-svc"
      - "traefik.http.services.nzbget-svc.loadbalancer.server.port=6789"

  ############################# INDEXERS

  # Jackett - Torrent proxy
  # Set url_base in Jackett settings if using PathPrefix
  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: always
    # profiles:
    # - media
    # network_mode: container:transmission-vpn
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$JACKETT_PORT:9117"
    volumes:
      - /opt/appdata/jackett:/config
      - /mnt/nfs/Downloads/misc:/data/downloads
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=Host(`jac.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"

  # NZBHydra2 - NZB meta search
  hydra:
    image: linuxserver/nzbhydra2:latest
    container_name: hydra
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$NZBHYDRA_PORT:5076"
    volumes:
      - /opt/appdata/hydra2:/config
      - /mnt/nfs/Downloads/misc:/data/downloads
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.hydra-rtr.entrypoints=https"
      - "traefik.http.routers.hydra-rtr.rule=Host(`hyd.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.hydra-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.hydra-rtr.service=hydra-svc"
      - "traefik.http.services.hydra-svc.loadbalancer.server.port=5076"

  ############################# PVRS

  # Lidarr - Music Management
  # Set url_base in lidarr settings if using PathPrefix
  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$LIDARR_PORT:8686"
    volumes:
      - /opt/appdata/lidarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      #- $DATADIR/docker/appdata/lidarr/MediaCover:/config/MediaCover
      - /mnt/nfs/Downloads/sabnzbd:/data/downloads
      - /mnt/nfs/Media/Audio/Music:/data/media/music
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.lidarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr-bypass.rule=Host(`lid.$DOMAINNAME0`) && (Headers(`X-Api-Key`, `$LIDARR_API_KEY`) || Query(`apikey`, `$LIDARR_API_KEY`))"
      - "traefik.http.routers.lidarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr.rule=Host(`lid.$DOMAINNAME0`)"
      - "traefik.http.routers.lidarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.lidarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.lidarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      - "traefik.http.routers.lidarr-rtr-bypass.service=lidarr-svc"
      - "traefik.http.services.lidarr-svc.loadbalancer.server.port=8686"

  # Radarr - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    image: linuxserver/radarr:nightly # latest was causing "Error parsing column 45"
    container_name: radarr
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$RADARR_PORT:7878"
    volumes:
      - /opt/appdata/radarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      #- $DATADIR/docker/appdata/radarr/MediaCover:/config/MediaCover
      - /mnt/nfs/Downloads/sabnzbd:/data/downloads
      - /mnt/nfs/Media/Video/Movies:/data/media/movies
      - /mnt/nfs/Media/Video/OVA:/data/media/ova
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`rad.$DOMAINNAME0`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`rad.$DOMAINNAME0`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # Sonarr - TV Shows management (Anime)
  # Set url_base in sonarr settings if using PathPrefix
  sonarra:
    image: linuxserver/sonarr:latest
    container_name: sonarra
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$SONARR_PORT:8989"
    volumes:
      - /opt/appdata/sonarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      #- $DATADIR/docker/appdata/sonarr/MediaCover:/config/MediaCover
      - /mnt/nfs/Downloads/nzbget:/data/downloads
      - /mnt/nfs/Media/Video/Anime:/data/media
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarra-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarra-rtr-bypass.rule=Host(`sona.$DOMAINNAME0`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarra-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarra-rtr.entrypoints=https"
      - "traefik.http.routers.sonarra-rtr.rule=Host(`sona.$DOMAINNAME0`)"
      - "traefik.http.routers.sonarra-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarra-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarra-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarra-rtr.service=sonarra-svc"
      - "traefik.http.routers.sonarra-rtr-bypass.service=sonarra-svc"
      - "traefik.http.services.sonarra-svc.loadbalancer.server.port=8989"

   # Sonarr - TV Shows management (Anime)
  # Set url_base in sonarr settings if using PathPrefix
  sonarrb:
    image: linuxserver/sonarr:latest
    container_name: sonarrb
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$SONARR_PORT:8989"
    volumes:
      - /opt/appdata/sonarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      #- $DATADIR/docker/appdata/sonarr/MediaCover:/config/MediaCover
      - /mnt/nfs/Downloads/nzbget:/data/downloads
      - /mnt/nfs/Media/Video/Kids TV:/data/media/kids
      - /mnt/nfs/Media/Video/Television:/data/media/tv
      - /mnt/nfs/Media/Video/ClassicTV:/data/media/classic
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarrb-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarrb-rtr-bypass.rule=Host(`sonb.$DOMAINNAME0`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarrb-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarrb-rtr.entrypoints=https"
      - "traefik.http.routers.sonarrb-rtr.rule=Host(`sonb.$DOMAINNAME0`)"
      - "traefik.http.routers.sonarrb-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarrb-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarrb-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarrb-rtr.service=sonarrb-svc"
      - "traefik.http.routers.sonarrb-rtr-bypass.service=sonarrb-svc"
      - "traefik.http.services.sonarrb-svc.loadbalancer.server.port=8989"

  # Readarr - Books management
  # Set url_base in readarr settings if using PathPrefix
  readarr:
    image: hotio/readarr:nightly
    container_name: readarr
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$READARR_PORT:8989"
    volumes:
      - /opt/appdata/readarr:/config
      - /mnt/nfs/Downloads/sabnzbd:/data/downloads
      - /mnt/Media/Print/Books:/data/media/books
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      UMASK: 002
      #ARGS: ""
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.readarr-rtr.entrypoints=https"
      - "traefik.http.routers.readarr-rtr.rule=Host(`read.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.readarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.readarr-rtr.service=readarr-svc"
      - "traefik.http.services.readarr-svc.loadbalancer.server.port=8787"

  # Lazylibrarian  – Ebooks and Management
  lazylibrarian:
    image: linuxserver/lazylibrarian
    container_name: lazylibrarian
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$LAZYLIBRARIAN_PORT:5299"
    volumes:
      - /opt/appdata/lazylibrarian:/config
      - /mnt/nfs/Downloads/sabnzbd:/data/downloads
      - /mnt/Media/Print/Books:/books:rw
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      DOCKER_MODS: linuxserver/calibre-web:calibre # set the path to converter tool to /app/calibre/ebook-convert
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.lazylibrarian-rtr.entrypoints=https"
      - "traefik.http.routers.lazylibrarian-rtr.rule=Host(`ll.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.lazylibrarian-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.lazylibrarian-rtr.service=lazylibrarian-svc"
      - "traefik.http.services.lazylibrarian-svc.loadbalancer.server.port=5299"

  ############################# MEDIA

  # Calibre-web  – Ebooks and Management (Plex of Ebooks)
  calibre-web:
    image: linuxserver/calibre-web
    container_name: calibre-web
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$CALIBRE_WEB_PORT:8083"
    volumes:
      - /opt/appdata/calibre-web:/config
      # - add path to calibre books folder
      - /mnt/Media/Print/Books:/books:rw
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      DOCKER_MODS: linuxserver/calibre-web:calibre # set the path to converter tool to /app/calibre/ebook-convert
      UMASK: 002
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.calibre-web-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-web-rtr.rule=Host(`calweb.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.calibre-web-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.calibre-web-rtr.service=calibre-web-svc"
      - "traefik.http.services.calibre-web-svc.loadbalancer.server.port=8083"

  # Calibre  – Ebooks and Management (Server)
  calibre:
    image: linuxserver/calibre
    container_name: calibre
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$CALIBRE_PORT:8080" # Desktop GUI
    #  - "$CALIBRE_PORT:8081" # Webserver GUI
    volumes:
      - /opt/appdata/calibre:/config:rw
      - /mnt/nfs/Downloads/sabnzbd:/data/downloads:rw
      - /mtn/Media/Print/Books:/data/media/books:rw
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      # - GUAC_USER=abc #Gucamole user optional
      # - GUAC_PASS=900150983cd24fb0d6963f7d28e17f72 #Guacamole password optional
      - UMASK_SET=002 #optional
      # - CLI_ARGS= #optional
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.calibre-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-rtr.rule=Host(`calibre.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.calibre-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.calibre-rtr.service=calibre-svc"
      - "traefik.http.services.calibre-svc.loadbalancer.server.port=8080"

  # Tautulli - Previously PlexPy. Plex statistics and monitoring
  # Set HTTP Root in Tautulli settings if using PathPrefix
  tautulli:
    image: linuxserver/tautulli:latest
    container_name: tautulli
    restart: unless-stopped
    # profiles:
    # - monitoring
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$TAUTULLI_PORT:8181"
    volumes:
      - /opt/appdata/tautulli/config:/config
      - /opt/appdata/tautulli/Logs:/logs:ro # For tautulli Plex log viewer
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`taut.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

  # Plex AutoScan - On demand/specific folder scanning for Plex
  autoscan:
    image: hotio/autoscan
    container_name: autoscan
    restart: "no"
    # profiles:
    # - media
    # - testing
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "3030:3030"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      UMASK: 002
      #PLEX_LOGIN: ""
      #PLEX_PASSWORD: ""
    volumes:
      - /opt/appdata/autoscan:/config
      
  # Glances - System Information
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    restart: unless-stopped
    # profiles:
    # - monitoring
    privileged: true
    # network_mode: host
    networks:
      - traefik-proxy
      - socket_proxy
      - default
    #depends_on:
    #  - socket-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$GLANCES_PORT:61208"
    pid: host
    volumes:
      - /opt/appdata/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
      - $USERDIR:/data/home:ro
      - /mnt/nfs/:/data/hdd1:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
    environment:
      # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      # GLANCES_OPT: "--export influxdb"
      GLANCES_OPT: "-w"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glan.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.glances-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  # qDirStat - Directory Statistics
  qdirstat:
    image: jlesage/qdirstat:latest
    container_name: qdirstat
    restart: unless-stopped
    # profiles:
    # - apps
    networks:
      - traefik-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$QDIRSTAT_PORT:5800"
    volumes:
      - $USERDIR:/data/home:ro
      - /opt/appdata/qdirstat/config:/config:rw
      - /mnt/nfs/:/data/hdd1:ro
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      UMASK: 002
      TZ: $TZ
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: $QDIRSTAT_VNC_PASSWD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qdirstat-rtr.entrypoints=https"
      - "traefik.http.routers.qdirstat-rtr.rule=Host(`qdi.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.qdirstat-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qdirstat-rtr.service=qdirstat-svc"
      - "traefik.http.services.qdirstat-svc.loadbalancer.server.port=5800"
      
   # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    # profiles:
    # - monitoring
    networks:
      - traefik-proxy
      - socket_proxy
    #depends_on:
    #  - socket-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$DOZZLE_PORT:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
    # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`doz.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

